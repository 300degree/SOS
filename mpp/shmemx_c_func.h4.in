dnl Copyright (c) 2016 Intel Corporation. All rights reserved.
dnl This software is available to you under the BSD license.
dnl
dnl This file is part of the Sandia OpenSHMEM software package. For license
dnl information, see the LICENSE file in the top level directory of the
dnl distribution.
dnl

#include <inttypes.h>

#ifndef SHMEM_FUNCTION_ATTRIBUTES
#  if OPAL_C_HAVE_VISIBILITY == 1
#     define SHMEM_FUNCTION_ATTRIBUTES __attribute__((visibility("default")))
#  else
#     define SHMEM_FUNCTION_ATTRIBUTES
#  endif
#endif

SHMEM_FUNCTION_ATTRIBUTES double SHPRE()shmemx_wtime(void);
SHMEM_FUNCTION_ATTRIBUTES char* SHPRE()shmemx_nodename(void);

SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_getmem_ct(shmemx_ct_t ct, void *target, const void *source, size_t len, int pe);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_putmem_ct(shmemx_ct_t ct, void *target, const void *source, size_t len, int pe);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_create(shmemx_ct_t *ct);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_free(shmemx_ct_t *ct);
SHMEM_FUNCTION_ATTRIBUTES long SHPRE()shmemx_ct_get(shmemx_ct_t ct);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_set(shmemx_ct_t ct, long value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_wait(shmemx_ct_t ct, long wait_for);

SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcontrol(int level, ...);

SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_register_gettid(uint64_t (*gettid_fn)(void));

/* Performance Counter Query Routines */
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_issued_write(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_issued_read(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_write(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_read(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_target(uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_all(shmem_ctx_t ctx, shmemx_pcntr_t *pcntr);

define(`SHMEM_C_WAIT_UNTIL_ALL',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_wait_until_all($2 *vars, size_t nelems, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_WAIT_UNTIL_ALL')

define(`SHMEM_C_WAIT_UNTIL_ANY',
`SHMEM_FUNCTION_ATTRIBUTES size_t SHPRE()shmemx_$1_wait_until_any($2 *vars, size_t nelems, int * restrict status, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_WAIT_UNTIL_ANY')

/* Special case, only enabled when C++ and C11 bindings are disabled */
#if ( !defined(__cplusplus) && \
      !(defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) ) || \
    defined(SHMEM_INTERNAL_INCLUDE) || defined(SHMEM_DECLARE_SPECIAL_CASES)
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_wait_until_all(long *ivars, size_t nelems, int cmp, long value);
SHMEM_FUNCTION_ATTRIBUTES size_t SHPRE()shmemx_wait_until_any(long *ivars, size_t nelems, int * restrict status, int cmp, long value);
#endif

define(`SHMEM_C_TEST_ALL',
`SHMEM_FUNCTION_ATTRIBUTES int SHPRE()shmemx_$1_test_all($2 *vars, size_t nelems, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_TEST_ALL')

define(`SHMEM_C_TEST_ANY',
`SHMEM_FUNCTION_ATTRIBUTES size_t SHPRE()shmemx_$1_test_any($2 *vars, size_t nelems, int * restrict status, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_TEST_ANY')
