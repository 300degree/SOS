dnl vi: set ft=m4
/* -*- C -*-
 *
 * Copyright 2011 Sandia Corporation. Under the terms of Contract
 * DE-AC04-94AL85000 with Sandia Corporation, the U.S.  Government
 * retains certain rights in this software.
 *
 * Copyright (c) 2016 Intel Corporation. All rights reserved.
 * This software is available to you under the BSD license.
 *
 * This file is part of the Sandia OpenSHMEM software package. For license
 * information, see the LICENSE file in the top level directory of the
 * distribution.
 *
 */

/*
 * This is a generated file, do not edit directly.
 */

include(shmem_bind_c.m4)dnl
#include "config.h"

#include <stdlib.h>
#include <stdio.h>

#define SHMEM_INTERNAL_INCLUDE
#include "shmem.h"
#include "shmem_internal.h"
#include "shmem_atomic.h"
#include "shmem_synchronization.h"

#ifdef ENABLE_PROFILING
#include "pshmem.h"

#pragma weak shmem_quiet = pshmem_quiet
#define shmem_quiet pshmem_quiet
#pragma weak shmem_fence = pshmem_fence
#define shmem_fence pshmem_fence

#pragma weak shmem_ctx_quiet = pshmem_ctx_quiet
#define shmem_ctx_quiet pshmem_ctx_quiet
#pragma weak shmem_ctx_fence = pshmem_ctx_fence
#define shmem_ctx_fence pshmem_ctx_fence

#pragma weak shmem_wait = pshmem_wait
#define shmem_wait pshmem_wait
#pragma weak shmem_wait_until = pshmem_wait_until
#define shmem_wait_until pshmem_wait_until

define(`SHMEM_PROF_DEF_WAIT',
`#pragma weak shmem_$1_wait = pshmem_$1_wait
#define shmem_$1_wait pshmem_$1_wait')dnl
SHMEM_BIND_C_WAIT(`SHMEM_PROF_DEF_WAIT')

define(`SHMEM_PROF_DEF_WAIT_UNTIL',
`#pragma weak shmem_$1_wait_until = pshmem_$1_wait_until
#define shmem_$1_wait_until pshmem_$1_wait_until')dnl
SHMEM_BIND_C_SYNC(`SHMEM_PROF_DEF_WAIT_UNTIL')

define(`SHMEM_PROF_DEF_TEST',
`#pragma weak shmem_$1_test = pshmem_$1_test
#define shmem_$1_test pshmem_$1_test')dnl
SHMEM_BIND_C_SYNC(`SHMEM_PROF_DEF_TEST')

#endif /* ENABLE_PROFILING */

void SHMEM_FUNCTION_ATTRIBUTES
shmem_quiet(void)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    shmem_internal_quiet(SHMEM_CTX_DEFAULT);
}


void SHMEM_FUNCTION_ATTRIBUTES
shmem_fence(void)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    shmem_internal_fence(SHMEM_CTX_DEFAULT);
}


void SHMEM_FUNCTION_ATTRIBUTES
shmem_ctx_quiet(shmem_ctx_t ctx)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    shmem_internal_quiet(ctx);
}


void SHMEM_FUNCTION_ATTRIBUTES
shmem_ctx_fence(shmem_ctx_t ctx)
{
    SHMEM_ERR_CHECK_INITIALIZED();

    shmem_internal_fence(ctx);
}


void SHMEM_FUNCTION_ATTRIBUTES
shmem_wait(long *ivar, long cmp_value)
{
    SHMEM_ERR_CHECK_INITIALIZED();
    SHMEM_ERR_CHECK_SYMMETRIC(ivar, sizeof(long));

    SHMEM_WAIT(ivar, cmp_value);
}


void SHMEM_FUNCTION_ATTRIBUTES
shmem_wait_until(long *ivar, shmem_cmp_t cmp, long value)
{
    SHMEM_ERR_CHECK_INITIALIZED();
    SHMEM_ERR_CHECK_SYMMETRIC(ivar, sizeof(long));
    SHMEM_ERR_CHECK_CMP_OP(cmp);

    SHMEM_WAIT_UNTIL(ivar, cmp, value);
}


#define SHMEM_DEF_WAIT(STYPE,TYPE)                                             \
    void SHMEM_FUNCTION_ATTRIBUTES                                             \
    shmem_##STYPE##_wait(TYPE *var, TYPE value)                                \
    {                                                                          \
        SHMEM_ERR_CHECK_INITIALIZED();                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(var, sizeof(TYPE));                          \
                                                                               \
        SHMEM_WAIT(var, value);                                                \
    }

SHMEM_BIND_C_WAIT(`SHMEM_DEF_WAIT')

#define SHMEM_DEF_WAIT_UNTIL(STYPE,TYPE)                                                       \
    void SHMEM_FUNCTION_ATTRIBUTES                                                             \
    shmem_##STYPE##_wait_until(TYPE *var, shmem_cmp_t cond, TYPE value)                        \
    {                                                                                          \
        SHMEM_ERR_CHECK_INITIALIZED();                                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(var, sizeof(TYPE));                                          \
        SHMEM_ERR_CHECK_CMP_OP(cond);                                                          \
                                                                                               \
        SHMEM_WAIT_UNTIL(var, cond, value);                                                    \
    }

SHMEM_BIND_C_SYNC(`SHMEM_DEF_WAIT_UNTIL')

#define SHMEM_DEF_TEST(STYPE,TYPE)                                                             \
    int SHMEM_FUNCTION_ATTRIBUTES                                                              \
    shmem_##STYPE##_test(TYPE *var, shmem_cmp_t cond, TYPE value)                              \
    {                                                                                          \
        int cmpret;                                                                            \
        SHMEM_ERR_CHECK_INITIALIZED();                                                         \
        SHMEM_ERR_CHECK_SYMMETRIC(var, sizeof(TYPE));                                          \
        SHMEM_ERR_CHECK_CMP_OP(cond);                                                          \
                                                                                               \
        COMP(cond, *(var), value, cmpret);                                                     \
        if (cmpret) {                                                                          \
            /* TODO: Memory ordering */                                                        \
        }                                                                                      \
        return cmpret;                                                                         \
    }

SHMEM_BIND_C_SYNC(`SHMEM_DEF_TEST')
